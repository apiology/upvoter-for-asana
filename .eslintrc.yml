---
env:
  browser: true
  es2020: true
  webextensions: true
extends:
  - airbnb-base
parserOptions:
  ecmaVersion: 11
  sourceType: module
globals:
  asanaAccessToken: readonly
  workspaceName: readonly
  customFieldName: readonly
  increment: readonly
rules:
  # might be worth bringing no-console back or stripping as part of
  # the build once this is more mature - right now it's helpful in
  # development
  no-console: "off"
  # Not sure of other easy UI available in an omnibox action
  no-alert: "off"
  #
  # Dangling commas on a function call/declaration just seems *wrong*,
  # regardless of what the geniuses at AirBNB think.
  #
  comma-dangle:
    - error
    - arrays: always-multiline
      objects: always-multiline
      imports: always-multiline
      exports: always-multiline
      functions: never
  # I don't know whether 'use strict' is the default in Chrome
  # extensions, so let's assume not.
  strict:
    - error
    - safe
  # for of rules are not relevant when we are only extending modern browsers
  #
  # https://github.com/airbnb/javascript/issues/1271#issuecomment-548688952
  no-restricted-syntax:
    - error
    - selector: 'ForInStatement'
      message: "for..in loops iterate over the entire prototype chain, which is virtually never what you want.\
        Use Object.{keys,values,entries}, and iterate over the resulting array."
    # - selector: 'ForOfStatement'
    #   message: 'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow \
    #    them. Separately, loops should be avoided in favor of array iterations.'
    - selector: 'LabeledStatement'
      message: 'Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.'
    - selector: 'WithStatement'
      message: '`with` is disallowed in strict mode because it makes code impossible to predict and optimize.'
  no-param-reassign:
    - error
    # this overrides the airbnb default.  callbacks modifying DOM
    # elements seem a reasonable thing to do, and the default of
    # 'props: true' would make that difficult, as the increasingly
    # ridiculous list of ways to fool the linter on this stackoverflow
    # page suggests:
    #
    # https://stackoverflow.com/questions/35637770/how-to-avoid-no-param-reassign-when-setting-a-property-on-a-dom-object
    - props: false
